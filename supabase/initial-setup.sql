-- Shared helper to keep updated_at fresh
create or replace function public.touch_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$;

-- ---------------------------------------------------------------------------
-- Profiles (1:1 with auth.users)
-- ---------------------------------------------------------------------------
create table if not exists public.profiles (
  id uuid primary key references auth.users on delete cascade,
  email text unique,
  full_name text,
  avatar_url text,
  created_at timestamptz default timezone('utc'::text, now()),
  updated_at timestamptz default timezone('utc'::text, now())
);

alter table public.profiles enable row level security;

drop trigger if exists profiles_set_updated_at on public.profiles;
create trigger profiles_set_updated_at
before update on public.profiles
for each row execute function public.touch_updated_at();

drop policy if exists "Profiles - owner can read" on public.profiles;
create policy "Profiles - owner can read"
  on public.profiles for select
  using (auth.uid() = id);

drop policy if exists "Profiles - owner can insert" on public.profiles;
create policy "Profiles - owner can insert"
  on public.profiles for insert
  with check (auth.uid() = id);

drop policy if exists "Profiles - owner can update" on public.profiles;
create policy "Profiles - owner can update"
  on public.profiles for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

create or replace function public.create_profile_for_user()
returns trigger
language plpgsql
security definer
as $$
begin
  insert into public.profiles (id, email)
  values (new.id, new.email)
  on conflict (id) do nothing;
  return new;
end;
$$;

drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
after insert on auth.users
for each row execute function public.create_profile_for_user();

-- ---------------------------------------------------------------------------
-- User preferences (one row per auth user)
-- ---------------------------------------------------------------------------
create table if not exists public.user_preferences (
  user_id uuid primary key references auth.users on delete cascade,
  preferred_location text,
  budget_range text,
  created_at timestamptz default timezone('utc'::text, now()),
  updated_at timestamptz default timezone('utc'::text, now())
);

alter table public.user_preferences enable row level security;

drop trigger if exists prefs_set_updated_at on public.user_preferences;
create trigger prefs_set_updated_at
before update on public.user_preferences
for each row execute function public.touch_updated_at();

drop policy if exists "Preferences - owner can read" on public.user_preferences;
create policy "Preferences - owner can read"
  on public.user_preferences for select
  using (auth.uid() = user_id);

drop policy if exists "Preferences - owner can insert" on public.user_preferences;
create policy "Preferences - owner can insert"
  on public.user_preferences for insert
  with check (auth.uid() = user_id);

drop policy if exists "Preferences - owner can update" on public.user_preferences;
create policy "Preferences - owner can update"
  on public.user_preferences for update
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- ---------------------------------------------------------------------------
-- College catalog (public read, service role manage)
-- ---------------------------------------------------------------------------
create table if not exists public.colleges (
  id bigint generated by default as identity primary key,
  name text unique not null,
  location text,
  state text,
  ranking integer,
  url text,
  grad_rate numeric,
  average_cost numeric,
  acceptance_rate numeric,
  median_salary numeric,
  size integer,
  median_earnings numeric,
  created_at timestamptz default timezone('utc'::text, now()),
  updated_at timestamptz default timezone('utc'::text, now())
);

alter table public.colleges enable row level security;

drop trigger if exists colleges_set_updated_at on public.colleges;
create trigger colleges_set_updated_at
before update on public.colleges
for each row execute function public.touch_updated_at();

drop policy if exists "Colleges - anyone can read" on public.colleges;
create policy "Colleges - anyone can read"
  on public.colleges for select using (true);

drop policy if exists "Colleges - service role can insert" on public.colleges;
create policy "Colleges - service role can insert"
  on public.colleges for insert
  with check (auth.role() = 'service_role');

drop policy if exists "Colleges - service role can update" on public.colleges;
create policy "Colleges - service role can update"
  on public.colleges for update
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

drop policy if exists "Colleges - service role can delete" on public.colleges;
create policy "Colleges - service role can delete"
  on public.colleges for delete
  using (auth.role() = 'service_role');

-- ---------------------------------------------------------------------------
-- Programs (child of colleges)
-- ---------------------------------------------------------------------------
create table if not exists public.programs (
  id bigint generated by default as identity primary key,
  college_id bigint references public.colleges(id) on delete cascade,
  name text not null,
  degree_type text,
  field_of_study text,
  duration integer,
  prestige integer,
  ranking_in_field integer,
  specialty text,
  created_at timestamptz default timezone('utc'::text, now()),
  updated_at timestamptz default timezone('utc'::text, now())
);

alter table public.programs enable row level security;

drop trigger if exists programs_set_updated_at on public.programs;
create trigger programs_set_updated_at
before update on public.programs
for each row execute function public.touch_updated_at();

drop policy if exists "Programs - anyone can read" on public.programs;
create policy "Programs - anyone can read"
  on public.programs for select using (true);

drop policy if exists "Programs - service role can insert" on public.programs;
create policy "Programs - service role can insert"
  on public.programs for insert
  with check (auth.role() = 'service_role');

drop policy if exists "Programs - service role can update" on public.programs;
create policy "Programs - service role can update"
  on public.programs for update
  using (auth.role() = 'service_role')
  with check (auth.role() = 'service_role');

drop policy if exists "Programs - service role can delete" on public.programs;
create policy "Programs - service role can delete"
  on public.programs for delete
  using (auth.role() = 'service_role');
